import {RouteLocationRaw} from 'vue-router';
import {SSRContext, renderToString} from 'vue/server-renderer';
import {basename} from 'path';
import {createApp} from './main';

export const entryServer = async (url: RouteLocationRaw, manifest: unknown) => {
    const {app, router, pageProps} = createApp();

    // set the router to the desired URL before rendering
    await router.push(url);
    await router.isReady();

    // passing SSR context object which will be available via useSSRContext()
    // @vitejs/plugin-vue injects code into a component's setup() that registers
    // itself on ctx.modules. After the render, ctx.modules would contain all the
    // components that have been instantiated during this render call.
    const ctx: SSRContext = {
        ...pageProps,
    };

    const html = await renderToString(app, ctx);

    // the SSR manifest generated by Vite contains module -> chunk/asset mapping
    // which we can then use to determine what files need to be preloaded for this
    // request.
    const preloadLinks = renderPreloadLinks(ctx.modules, manifest);
    return [html, preloadLinks];
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const renderPreloadLinks = (modules: number[], manifest: any) => {
    let links = '';
    const seen = new Set();
    modules.forEach((id: number) => {
        const files = manifest[id];
        if (files) {
            files.forEach((file: string) => {
                if (!seen.has(file)) {
                    seen.add(file);
                    const filename = basename(file);
                    if (manifest[filename]) {
                        for (const depFile of manifest[filename]) {
                            links += renderPreloadLink(depFile);
                            seen.add(depFile);
                        }
                    }
                    links += renderPreloadLink(file);
                }
            });
        }
    });
    return links;
};

// eslint-disable-next-line complexity
const renderPreloadLink = (file: string) => {
    if (file.endsWith('.js')) return `<link rel="modulepreload" crossorigin href="${file}">`;
    if (file.endsWith('.cjs')) return `<link rel="modulepreload" crossorigin href="${file}">`;
    if (file.endsWith('.esm')) return `<link rel="modulepreload" crossorigin href="${file}">`;
    if (file.endsWith('.css')) return `<link rel="stylesheet" href="${file}">`;
    if (file.endsWith('.woff')) return `<link rel="preload" href="${file}" as="font" type="font/woff" crossorigin>`;
    if (file.endsWith('.woff2')) return `<link rel="preload" href="${file}" as="font" type="font/woff2" crossorigin>`;
    if (file.endsWith('.gif')) return `<link rel="preload" href="${file}" as="image" type="image/gif">`;
    if (file.endsWith('.jpg') || file.endsWith('.jpeg'))
        return `<link rel="preload" href="${file}" as="image" type="image/jpeg">`;
    if (file.endsWith('.png')) return `<link rel="preload" href="${file}" as="image" type="image/png">`;

    // TODO
    return '';
};
